"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""An enumeration."""
enum AccountsUserPhoneTypeChoices {
  """Whatsapp"""
  WHATSAPP

  """Telegram"""
  TELEGRAM

  """Call"""
  CALL
}

"""An enumeration."""
enum AccountsUserTypeChoices {
  """Agency"""
  AGENCY

  """Independent"""
  INDEPENDENT
}

"""An enumeration."""
enum AccountType {
  AGENCY
  INDEPENDENT
}

input ActivateModelInput {
  modelId: String!
  rangeType: ModelRangeType!
  clientMutationId: String
}

type ActivateModelPayload {
  model: ModelNode
  clientMutationId: String
}

"""An enumeration."""
enum AdsBannerCategoryChoices {
  """Home"""
  HOME

  """Vip"""
  VIP

  """Top"""
  TOP

  """Regular"""
  REGULAR
}

type BannerNode implements Node {
  """The ID of the object"""
  id: ID!
  title: String!
  url: String!
  mobileUrl: String!
  action: String
  category: AdsBannerCategoryChoices!
  city: CityNode
  created: DateTime!
  updated: DateTime!
}

type BannerNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [BannerNodeEdge]!
}

"""A Relay edge containing a `BannerNode` and its cursor."""
type BannerNodeEdge {
  """The item at the end of the edge"""
  node: BannerNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""
The `BigInt` scalar type represents non-fractional whole numeric values.
`BigInt` is not constrained to 32-bit like the `Int` type and thus is a less
compatible type.
"""
scalar BigInt

input ChangePasswordInput {
  oldPassword: String!
  newPassword: String!
  clientMutationId: String
}

type ChangePasswordPayload {
  user: UserNode
  clientMutationId: String
}

type CityNode implements Node {
  """The ID of the object"""
  id: ID!
  name: String!
  nameAscii: String!
  slug: String!
  geonameId: Int
  alternateNames: String
  displayName: String!
  searchNames: String!
  latitude: Decimal
  longitude: Decimal
  region: RegionNode
  population: BigInt
  featureCode: String
  timezone: String
  userSet(offset: Int, before: String, after: String, first: Int, last: Int): UserNodeConnection!
  models(offset: Int, before: String, after: String, first: Int, last: Int, name_Icontains: String, age: Int, hairColor: ModelsModelHairColorChoices, eyesColor: ModelsModelEyesColorChoices, nationality: ModelsModelNationalityChoices, city: ID, boobs: Boolean, tattoos: Boolean, smoker: Boolean, piercings: Boolean, party: Boolean, isVerified: Boolean, isActive: Boolean, activationDate_Gt: DateTime, activationDate_Gte: DateTime, activationDate_Lt: DateTime, activationDate_Lte: DateTime, createdAt_Gt: DateTime, createdAt_Gte: DateTime, createdAt_Lt: DateTime, createdAt_Lte: DateTime, updatedAt_Gt: DateTime, updatedAt_Gte: DateTime, updatedAt_Lt: DateTime, updatedAt_Lte: DateTime, gender: ModelsModelGenderChoices, rangeType: ModelsModelRangeTypeChoices, user_Id: String, user_Type: String, languages: String, service_Modes: String, services: String, nonVisibleServices: String, attributes: String): ModelNodeConnection!
  banners(offset: Int, before: String, after: String, first: Int, last: Int, city: ID, category: AdsBannerCategoryChoices): BannerNodeConnection!
}

type CityNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CityNodeEdge]!
}

"""A Relay edge containing a `CityNode` and its cursor."""
type CityNodeEdge {
  """The item at the end of the edge"""
  node: CityNode

  """A cursor for use in pagination"""
  cursor: String!
}

input CreateModelInput {
  name: String!
  height: Int!
  metrics: String!
  weight: Int!
  age: Int!
  hairColor: ModelHairColor!
  eyesColor: ModelEyesColor!
  nationality: ModelNationality!
  languages: [ModelLanguages]!
  cityId: String!
  boobs: Boolean!
  tattoos: Boolean!
  piercings: Boolean!
  party: Boolean!
  images: [String]!
  videos: [String]!
  description: String
  gender: ModelGender!
  services: [ModelServices]!
  attributes: [ModelAttributes]!
  nonVisibleServices: [ModelNonVisibleServices]!
  clientMutationId: String
}

type CreateModelPayload {
  model: ModelNode
  clientMutationId: String
}

input CreateUserInput {
  email: String!
  name: String!
  website: String
  cityId: String!
  phoneNumbers: [UserPhoneInputType]!
  password: String!
  type: AccountType!
  clientMutationId: String
}

type CreateUserPayload {
  user: UserNode
  clientMutationId: String
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

input DeactivateModelInput {
  modelId: String!
  clientMutationId: String
}

type DeactivateModelPayload {
  model: ModelNode
  clientMutationId: String
}

"""The `Decimal` scalar type represents a python Decimal."""
scalar Decimal

input EditModelInput {
  name: String!
  height: Int!
  metrics: String!
  weight: Int!
  age: Int!
  hairColor: ModelHairColor!
  eyesColor: ModelEyesColor!
  nationality: ModelNationality!
  languages: [ModelLanguages]!
  cityId: String!
  boobs: Boolean!
  tattoos: Boolean!
  piercings: Boolean!
  party: Boolean!
  images: [String]!
  videos: [String]!
  description: String
  gender: ModelGender!
  services: [ModelServices]!
  attributes: [ModelAttributes]!
  nonVisibleServices: [ModelNonVisibleServices]!
  modelId: String!
  clientMutationId: String
}

type EditModelPayload {
  model: ModelNode
  clientMutationId: String
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

"""An enumeration."""
enum ModelAttributes {
  PORN_STAR
  MASSEUSE
  UNIVERSITY_STUDENT
}

"""An enumeration."""
enum ModelEyesColor {
  BROWN
  BLACK
  BLUE
  GREEN
  HAZEL
}

"""An enumeration."""
enum ModelGender {
  WOMAN
  TRANSGENDER
}

"""An enumeration."""
enum ModelHairColor {
  BLONDE
  RED
  BLACK
  BROWN
  OTHER
}

type ModelImageNode implements Node {
  """The ID of the object"""
  id: ID!
  model: ModelNode!
  imageUrl: String
}

"""An enumeration."""
enum ModelLanguages {
  SPANISH
  ENGLISH
  FRENCH
  RUSSIAN
  GERMAN
  ITALIAN
  CHINESE
  PORTUGUESE
}

"""An enumeration."""
enum ModelNationality {
  AF
  AX
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AW
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BA
  BW
  BR
  IO
  BN
  BG
  BF
  BI
  KH
  CM
  CA
  CV
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  CI
  HR
  CU
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  ET
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KP
  KR
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MK
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  AN
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  RO
  RU
  RW
  RE
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SK
  SI
  SB
  SO
  ZA
  SS
  GS
  ES
  LK
  SD
  SR
  SJ
  SZ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  US
  UY
  UZ
  VU
  VE
  VN
  VG
  VI
  WF
  YE
  ZM
  ZW
}

type ModelNode implements Node {
  """The ID of the object"""
  id: ID!
  user: UserNode!
  name: String!
  age: Int!
  height: Int

  """Enter measurements in the format 60-90-60"""
  metrics: String
  weight: Int
  description: String
  gender: ModelsModelGenderChoices!
  hairColor: ModelsModelHairColorChoices!
  eyesColor: ModelsModelEyesColorChoices!
  nationality: ModelsModelNationalityChoices!
  city: CityNode!
  boobs: Boolean!
  tattoos: Boolean!
  smoker: Boolean!
  piercings: Boolean!
  party: Boolean!
  services: [ModelServices]
  nonVisibleServices: [String]!

  """Selecciona los modos de servicio disponibles"""
  serviceModes: [String]!

  """Selecciona los atributos disponibles"""
  attributes: [String]!
  languages: [ModelLanguages]
  isVerified: Boolean!
  isActive: Boolean!
  activationDate: DateTime
  rangeType: ModelsModelRangeTypeChoices!
  createdAt: DateTime!
  updatedAt: DateTime!
  images: [ModelImageNode]
  videos: [ModelVideoNode]
  expirationDate: String
}

type ModelNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ModelNodeEdge]!
}

"""A Relay edge containing a `ModelNode` and its cursor."""
type ModelNodeEdge {
  """The item at the end of the edge"""
  node: ModelNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""An enumeration."""
enum ModelNonVisibleServices {
  BDSM
  DOMINANT_MISTRESS
  SUBMISSIVE
  BONDAGE
  FULL_ORAL
  DEEP_THROAT
  COUPLES_SERVICE
  CUM_KISS
  ANILINGUS
  SCAT
  STRAP_ON
  FACIAL
  SWALLOW
  FULL_FRENCH
  ANAL
  GOLDEN_SHOWER
  RECEIVED_GOLDEN_SHOWER
  LESBIAN
  SQUIRTING
  PROSTATE_MASSAGE
  FETISHISM
}

"""An enumeration."""
enum ModelRangeType {
  REGULAR
  TOP
  VIP
}

"""An enumeration."""
enum ModelServices {
  COUPLES_SERVICE
  PARTIES
  GIRLFRIEND_EXPERIENCE
  EVENT_OUTINGS
  GO_SHOPPING
  DANCING
  SWING_DANCING
  SALSA_DANCING
  GO_PARTYING
  GO_TO_DINNER
  WEEKEND_GETAWAY
  TRAVEL
  DINNER_WITH_FRIENDS
  EROTIC_READING
  PRIVATE_PARTIES
  PRIVATE_EVENTS
  SHOPPING
  HIGH_PROFILE_EVENTS
}

"""An enumeration."""
enum ModelsModelEyesColorChoices {
  """Brown"""
  BROWN

  """Black"""
  BLACK

  """Blue"""
  BLUE

  """Green"""
  GREEN

  """Hazel"""
  HAZEL
}

"""An enumeration."""
enum ModelsModelGenderChoices {
  """Woman"""
  WOMAN

  """Transgender"""
  TRANSGENDER
}

"""An enumeration."""
enum ModelsModelHairColorChoices {
  """Blonde"""
  BLONDE

  """Red"""
  RED

  """Black"""
  BLACK

  """Brown"""
  BROWN

  """Other color"""
  OTHER
}

"""An enumeration."""
enum ModelsModelNationalityChoices {
  """Afghanistan"""
  AF

  """Aland Islands"""
  AX

  """Albania"""
  AL

  """Algeria"""
  DZ

  """AmericanSamoa"""
  AS

  """Andorra"""
  AD

  """Angola"""
  AO

  """Anguilla"""
  AI

  """Antarctica"""
  AQ

  """Antigua and Barbuda"""
  AG

  """Argentina"""
  AR

  """Armenia"""
  AM

  """Aruba"""
  AW

  """Australia"""
  AU

  """Austria"""
  AT

  """Azerbaijan"""
  AZ

  """Bahamas"""
  BS

  """Bahrain"""
  BH

  """Bangladesh"""
  BD

  """Barbados"""
  BB

  """Belarus"""
  BY

  """Belgium"""
  BE

  """Belize"""
  BZ

  """Benin"""
  BJ

  """Bermuda"""
  BM

  """Bhutan"""
  BT

  """Bolivia, Plurinational State of"""
  BO

  """Bosnia and Herzegovina"""
  BA

  """Botswana"""
  BW

  """Brazil"""
  BR

  """British Indian Ocean Territory"""
  IO

  """Brunei Darussalam"""
  BN

  """Bulgaria"""
  BG

  """Burkina Faso"""
  BF

  """Burundi"""
  BI

  """Cambodia"""
  KH

  """Cameroon"""
  CM

  """Canada"""
  CA

  """Cape Verde"""
  CV

  """Cayman Islands"""
  KY

  """Central African Republic"""
  CF

  """Chad"""
  TD

  """Chile"""
  CL

  """China"""
  CN

  """Christmas Island"""
  CX

  """Cocos (Keeling) Islands"""
  CC

  """Colombia"""
  CO

  """Comoros"""
  KM

  """Congo"""
  CG

  """Congo, The Democratic Republic of the Congo"""
  CD

  """Cook Islands"""
  CK

  """Costa Rica"""
  CR

  """Cote d'Ivoire"""
  CI

  """Croatia"""
  HR

  """Cuba"""
  CU

  """Cyprus"""
  CY

  """Czech Republic"""
  CZ

  """Denmark"""
  DK

  """Djibouti"""
  DJ

  """Dominica"""
  DM

  """Dominican Republic"""
  DO

  """Ecuador"""
  EC

  """Egypt"""
  EG

  """El Salvador"""
  SV

  """Equatorial Guinea"""
  GQ

  """Eritrea"""
  ER

  """Estonia"""
  EE

  """Ethiopia"""
  ET

  """Falkland Islands (Malvinas)"""
  FK

  """Faroe Islands"""
  FO

  """Fiji"""
  FJ

  """Finland"""
  FI

  """France"""
  FR

  """French Guiana"""
  GF

  """French Polynesia"""
  PF

  """Gabon"""
  GA

  """Gambia"""
  GM

  """Georgia"""
  GE

  """Germany"""
  DE

  """Ghana"""
  GH

  """Gibraltar"""
  GI

  """Greece"""
  GR

  """Greenland"""
  GL

  """Grenada"""
  GD

  """Guadeloupe"""
  GP

  """Guam"""
  GU

  """Guatemala"""
  GT

  """Guernsey"""
  GG

  """Guinea"""
  GN

  """Guinea-Bissau"""
  GW

  """Guyana"""
  GY

  """Haiti"""
  HT

  """Holy See (Vatican City State)"""
  VA

  """Honduras"""
  HN

  """Hong Kong"""
  HK

  """Hungary"""
  HU

  """Iceland"""
  IS

  """India"""
  IN

  """Indonesia"""
  ID

  """Iran, Islamic Republic of Persian Gulf"""
  IR

  """Iraq"""
  IQ

  """Ireland"""
  IE

  """Isle of Man"""
  IM

  """Israel"""
  IL

  """Italy"""
  IT

  """Jamaica"""
  JM

  """Japan"""
  JP

  """Jersey"""
  JE

  """Jordan"""
  JO

  """Kazakhstan"""
  KZ

  """Kenya"""
  KE

  """Kiribati"""
  KI

  """Korea, Democratic People's Republic of Korea"""
  KP

  """Korea, Republic of South Korea"""
  KR

  """Kuwait"""
  KW

  """Kyrgyzstan"""
  KG

  """Laos"""
  LA

  """Latvia"""
  LV

  """Lebanon"""
  LB

  """Lesotho"""
  LS

  """Liberia"""
  LR

  """Libyan Arab Jamahiriya"""
  LY

  """Liechtenstein"""
  LI

  """Lithuania"""
  LT

  """Luxembourg"""
  LU

  """Macao"""
  MO

  """Macedonia"""
  MK

  """Madagascar"""
  MG

  """Malawi"""
  MW

  """Malaysia"""
  MY

  """Maldives"""
  MV

  """Mali"""
  ML

  """Malta"""
  MT

  """Marshall Islands"""
  MH

  """Martinique"""
  MQ

  """Mauritania"""
  MR

  """Mauritius"""
  MU

  """Mayotte"""
  YT

  """Mexico"""
  MX

  """Micronesia, Federated States of Micronesia"""
  FM

  """Moldova"""
  MD

  """Monaco"""
  MC

  """Mongolia"""
  MN

  """Montenegro"""
  ME

  """Montserrat"""
  MS

  """Morocco"""
  MA

  """Mozambique"""
  MZ

  """Myanmar"""
  MM

  """Namibia"""
  NA

  """Nauru"""
  NR

  """Nepal"""
  NP

  """Netherlands"""
  NL

  """Netherlands Antilles"""
  AN

  """New Caledonia"""
  NC

  """New Zealand"""
  NZ

  """Nicaragua"""
  NI

  """Niger"""
  NE

  """Nigeria"""
  NG

  """Niue"""
  NU

  """Norfolk Island"""
  NF

  """Northern Mariana Islands"""
  MP

  """Norway"""
  NO

  """Oman"""
  OM

  """Pakistan"""
  PK

  """Palau"""
  PW

  """Palestinian Territory, Occupied"""
  PS

  """Panama"""
  PA

  """Papua New Guinea"""
  PG

  """Paraguay"""
  PY

  """Peru"""
  PE

  """Philippines"""
  PH

  """Pitcairn"""
  PN

  """Poland"""
  PL

  """Portugal"""
  PT

  """Puerto Rico"""
  PR

  """Qatar"""
  QA

  """Romania"""
  RO

  """Russia"""
  RU

  """Rwanda"""
  RW

  """Reunion"""
  RE

  """Saint Barthelemy"""
  BL

  """Saint Helena, Ascension and Tristan Da Cunha"""
  SH

  """Saint Kitts and Nevis"""
  KN

  """Saint Lucia"""
  LC

  """Saint Martin"""
  MF

  """Saint Pierre and Miquelon"""
  PM

  """Saint Vincent and the Grenadines"""
  VC

  """Samoa"""
  WS

  """San Marino"""
  SM

  """Sao Tome and Principe"""
  ST

  """Saudi Arabia"""
  SA

  """Senegal"""
  SN

  """Serbia"""
  RS

  """Seychelles"""
  SC

  """Sierra Leone"""
  SL

  """Singapore"""
  SG

  """Slovakia"""
  SK

  """Slovenia"""
  SI

  """Solomon Islands"""
  SB

  """Somalia"""
  SO

  """South Africa"""
  ZA

  """South Sudan"""
  SS

  """South Georgia and the South Sandwich Islands"""
  GS

  """Spain"""
  ES

  """Sri Lanka"""
  LK

  """Sudan"""
  SD

  """Suriname"""
  SR

  """Svalbard and Jan Mayen"""
  SJ

  """Swaziland"""
  SZ

  """Sweden"""
  SE

  """Switzerland"""
  CH

  """Syrian Arab Republic"""
  SY

  """Taiwan"""
  TW

  """Tajikistan"""
  TJ

  """Tanzania, United Republic of Tanzania"""
  TZ

  """Thailand"""
  TH

  """Timor-Leste"""
  TL

  """Togo"""
  TG

  """Tokelau"""
  TK

  """Tonga"""
  TO

  """Trinidad and Tobago"""
  TT

  """Tunisia"""
  TN

  """Turkey"""
  TR

  """Turkmenistan"""
  TM

  """Turks and Caicos Islands"""
  TC

  """Tuvalu"""
  TV

  """Uganda"""
  UG

  """Ukraine"""
  UA

  """United Arab Emirates"""
  AE

  """United Kingdom"""
  GB

  """United States"""
  US

  """Uruguay"""
  UY

  """Uzbekistan"""
  UZ

  """Vanuatu"""
  VU

  """Venezuela, Bolivarian Republic of Venezuela"""
  VE

  """Vietnam"""
  VN

  """Virgin Islands, British"""
  VG

  """Virgin Islands, U.S."""
  VI

  """Wallis and Futuna"""
  WF

  """Yemen"""
  YE

  """Zambia"""
  ZM

  """Zimbabwe"""
  ZW
}

"""An enumeration."""
enum ModelsModelRangeTypeChoices {
  """Regular"""
  REGULAR

  """Top"""
  TOP

  """Vip"""
  VIP
}

type ModelVideoNode implements Node {
  """The ID of the object"""
  id: ID!
  model: ModelNode!
  videoUrl: String
}

type Mutation {
  createModel(input: CreateModelInput!): CreateModelPayload
  editModel(input: EditModelInput!): EditModelPayload
  verifiedModel(input: VerifiedModelInput!): VerifiedModelPayload
  activateModel(input: ActivateModelInput!): ActivateModelPayload
  deactivateModel(input: DeactivateModelInput!): DeactivateModelPayload

  """Obtain JSON Web Token mutation"""
  tokenAuth(email: String!, password: String!): ObtainJSONWebToken
  verifyToken(token: String): Verify
  refreshToken(token: String): Refresh
  createUser(input: CreateUserInput!): CreateUserPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  changePassword(input: ChangePasswordInput!): ChangePasswordPayload
}

"""An object with an ID"""
interface Node {
  """The ID of the object"""
  id: ID!
}

"""Obtain JSON Web Token mutation"""
type ObtainJSONWebToken {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An enumeration."""
enum PhoneType {
  WHATSAPP
  TELEGRAM
  CALL
}

type Query {
  banners(offset: Int, before: String, after: String, first: Int, last: Int, city: ID, category: AdsBannerCategoryChoices): BannerNodeConnection
  city(
    """The ID of the object"""
    id: ID!
  ): CityNode
  cities(offset: Int, before: String, after: String, first: Int, last: Int, searchNames: String, searchNames_Icontains: String, regionId: String): CityNodeConnection
  femaleCities: [CityNode]
  transCities: [CityNode]
  region(
    """The ID of the object"""
    id: ID!
  ): RegionNode
  regions(offset: Int, before: String, after: String, first: Int, last: Int, name: String, name_Icontains: String): RegionNodeConnection
  model(
    """The ID of the object"""
    id: ID!
  ): ModelNode
  models(offset: Int, before: String, after: String, first: Int, last: Int, name_Icontains: String, age: Int, hairColor: ModelsModelHairColorChoices, eyesColor: ModelsModelEyesColorChoices, nationality: ModelsModelNationalityChoices, city: ID, boobs: Boolean, tattoos: Boolean, smoker: Boolean, piercings: Boolean, party: Boolean, isVerified: Boolean, isActive: Boolean, activationDate_Gt: DateTime, activationDate_Gte: DateTime, activationDate_Lt: DateTime, activationDate_Lte: DateTime, createdAt_Gt: DateTime, createdAt_Gte: DateTime, createdAt_Lt: DateTime, createdAt_Lte: DateTime, updatedAt_Gt: DateTime, updatedAt_Gte: DateTime, updatedAt_Lt: DateTime, updatedAt_Lte: DateTime, gender: ModelsModelGenderChoices, rangeType: ModelsModelRangeTypeChoices, user_Id: String, user_Type: String, languages: String, service_Modes: String, services: String, nonVisibleServices: String, attributes: String): ModelNodeConnection
  me: UserNode
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
}

type RegionNode implements Node {
  """The ID of the object"""
  id: ID!
  name: String!
  nameAscii: String!
  slug: String!
  geonameId: Int
  alternateNames: String
  displayName: String!
  geonameCode: String
  citySet(offset: Int, before: String, after: String, first: Int, last: Int, searchNames: String, searchNames_Icontains: String, regionId: String): CityNodeConnection!
}

type RegionNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [RegionNodeEdge]!
}

"""A Relay edge containing a `RegionNode` and its cursor."""
type RegionNodeEdge {
  """The item at the end of the edge"""
  node: RegionNode

  """A cursor for use in pagination"""
  cursor: String!
}

input UpdateUserInput {
  email: String!
  name: String!
  website: String
  cityId: String!
  phoneNumbers: [UserPhoneInputType]!
  userId: String!
  clientMutationId: String
}

type UpdateUserPayload {
  user: UserNode
  clientMutationId: String
}

type UserNode implements Node {
  """The ID of the object"""
  id: ID!
  password: String!
  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!
  email: String!
  name: String!
  website: String!
  city: CityNode
  type: AccountsUserTypeChoices
  created: DateTime!
  updated: DateTime!
  isStaff: Boolean!
  isActive: Boolean!
  phoneNumbers(offset: Int, before: String, after: String, first: Int, last: Int): UserPhoneNodeConnection!
  models(offset: Int, before: String, after: String, first: Int, last: Int, name_Icontains: String, age: Int, hairColor: ModelsModelHairColorChoices, eyesColor: ModelsModelEyesColorChoices, nationality: ModelsModelNationalityChoices, city: ID, boobs: Boolean, tattoos: Boolean, smoker: Boolean, piercings: Boolean, party: Boolean, isVerified: Boolean, isActive: Boolean, activationDate_Gt: DateTime, activationDate_Gte: DateTime, activationDate_Lt: DateTime, activationDate_Lte: DateTime, createdAt_Gt: DateTime, createdAt_Gte: DateTime, createdAt_Lt: DateTime, createdAt_Lte: DateTime, updatedAt_Gt: DateTime, updatedAt_Gte: DateTime, updatedAt_Lt: DateTime, updatedAt_Lte: DateTime, gender: ModelsModelGenderChoices, rangeType: ModelsModelRangeTypeChoices, user_Id: String, user_Type: String, languages: String, service_Modes: String, services: String, nonVisibleServices: String, attributes: String): ModelNodeConnection!
  modelsQty: Int
  activeWomanModels: Int
  activeTransModels: Int
  verifiedModels: Int
}

type UserNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserNodeEdge]!
}

"""A Relay edge containing a `UserNode` and its cursor."""
type UserNodeEdge {
  """The item at the end of the edge"""
  node: UserNode

  """A cursor for use in pagination"""
  cursor: String!
}

input UserPhoneInputType {
  phone: String!
  type: PhoneType!
}

type UserPhoneNode implements Node {
  """The ID of the object"""
  id: ID!
  user: UserNode!
  phone: String!
  type: AccountsUserPhoneTypeChoices!
}

type UserPhoneNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserPhoneNodeEdge]!
}

"""A Relay edge containing a `UserPhoneNode` and its cursor."""
type UserPhoneNodeEdge {
  """The item at the end of the edge"""
  node: UserPhoneNode

  """A cursor for use in pagination"""
  cursor: String!
}

input VerifiedModelInput {
  modelId: String!
  clientMutationId: String
}

type VerifiedModelPayload {
  model: ModelNode
  clientMutationId: String
}

type Verify {
  payload: GenericScalar!
}

